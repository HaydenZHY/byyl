Program -> compUnit
compUnit -> (decl | funcDef)* EOF
decl -> constDecl | varDecl
constDecl -> 'const' bType constDef (',' constDef)* ';'
bType -> 'int' | 'float'
constDef -> Ident '=' constInitVal
constInitVal -> constExp
varDecl -> bType varDef (',' varDef)* ';'
varDef -> Ident | Ident '=' initVal
initVal -> exp
funcDef -> funcType Ident '(' (funcFParams)? ')' block
funcType -> 'void' | 'int'
funcFParams -> funcFParam (',' funcFParam)*
funcFParam -> bType Ident
block -> '{' (blockItem)* '}'
blockItem -> decl | stmt
stmt -> lVal '=' exp ';' | (exp)? ';' | block | 'if' '(' cond ')' stmt ('else' stmt)? | 'return' (exp)? ';'
exp -> addExp
cond -> lOrExp
lVal -> Ident
primaryExp -> '(' exp ')' | lVal | number
number -> IntConst | floatConst
unaryExp -> primaryExp | Ident '(' (funcRParams)? ')' | unaryOp unaryExp
unaryOp -> '+' | '-' | '!'
funcRParams -> funcRParam (',' funcRParam)*
funcRParam -> exp
mulExp -> unaryExp | mulExp ('*' | '/' | '%') unaryExp
addExp -> mulExp | addExp ('+' | '-') mulExp
relExp -> addExp | relExp ('<' | '>' | '<=' | '>=') addExp
eqExp -> relExp | eqExp ('==' | '!=') relExp
lAndExp -> eqExp | lAndExp '&&' eqExp
lOrExp -> lAndExp | lOrExp '||' lAndExp
constExp -> addExp
IntConst -> [0-9]+
Ident -> [a-zA-Z_][a-zA-Z_0-9]*
floatConst -> [0-9]+'.'[0-9]+
